/**
 * a documented google oauth2 library used to verify the id token
 *
 * req.craft object that contains the following:
 * - authenticated: boolean
 * - message: string
 * - account: object (contains the id token info)
 *
 */

import { OAuth2Client } from 'google-auth-library';
const client = new OAuth2Client();

/**
 * Checks request header for a valid id token.
 * This function must be called before any route that requires authentication.
 */
function verify(req, res, next) {
	const isHeaderInvalid =
		req.headers.authentication == undefined ||
		req.headers.authentication.split(' ')[0] != 'Bearer';

	if (isHeaderInvalid) {
		req.craft = {
			authenticated: false,
			message: 'Invalid Authentication',
			account: null,
		};
		next();
		return;
	}

	// client id is generated by the google cloud console when you register your app
	const CLIENT_ID = 'random_string_here.apps.googleusercontent.com';

	// id token is generated by the google sign in library when the client signs in
	const ID_TOKEN = req.headers.authentication.split(' ')[1];

	client
		.verifyIdToken({
			idToken: ID_TOKEN,
			audience: CLIENT_ID,
		})
		.then(ticket => {
			const account = ticket.getPayload();

			req.craft = {
				authenticated: true,
				message: 'Authenticated',
				account: account,
			};
			next();
			return;
		})

		// call the verify function and assign the routes
		.catch(e => {
			// contains the user data if token format is valid
			let account = null;

			// get the error message
			const message = e.message.split(':')[0].split(',')[0];

			// if the token is expired, then extract user data from the token
			if (message == 'Token used too late') {
				// extract user data from the error string
				account = JSON.parse('{' + e.message.split('{')[1]);
			}

			req.craft = {
				authenticated: false,
				message: message,
				account: account,
			};
			next();
			return;
		});
}

/**
 * Route is locked for authenticated users only.
 * This function must be called after the verify middleware.
 * Otherwise, the req.craft will not be updated.
 */
function authenticate(req, res, next) {
	// note: req.craft are processed by middleware
	if (req.craft.authenticated) {
		// send verify() status
		// continue to the next middleware
		next();
		return;
	} else {
		// send verify() status
		res.status(401).json(req.craft);
		return;
	}
}

const Google = { verify, authenticate };
export { Google };
